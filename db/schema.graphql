"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Account`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition
  ): AccountsConnection

  """Reads and enables pagination through a set of `ProposalDraft`."""
  proposalDrafts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProposalDraft`."""
    orderBy: [ProposalDraftsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProposalDraftCondition
  ): ProposalDraftsConnection

  """Reads and enables pagination through a set of `RawProposal`."""
  rawProposals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RawProposal`."""
    orderBy: [RawProposalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RawProposalCondition
  ): RawProposalsConnection
  account(id: UUID!): Account
  rawProposal(id: UUID!): RawProposal

  """Reads a single `Account` using its globally unique `ID`."""
  accountByNodeId(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    nodeId: ID!
  ): Account

  """Reads a single `RawProposal` using its globally unique `ID`."""
  rawProposalByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RawProposal`.
    """
    nodeId: ID!
  ): RawProposal
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Account` values."""
type AccountsConnection {
  """A list of `Account` objects."""
  nodes: [Account!]!

  """
  A list of edges which contains the `Account` and cursor to aid in pagination.
  """
  edges: [AccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Account` you could get from the connection."""
  totalCount: Int!
}

type Account implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!

  """Reads and enables pagination through a set of `RawProposal`."""
  rawProposalsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RawProposal`."""
    orderBy: [RawProposalsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RawProposalCondition
  ): RawProposalsConnection!
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""A connection to a list of `RawProposal` values."""
type RawProposalsConnection {
  """A list of `RawProposal` objects."""
  nodes: [RawProposal!]!

  """
  A list of edges which contains the `RawProposal` and cursor to aid in pagination.
  """
  edges: [RawProposalsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RawProposal` you could get from the connection."""
  totalCount: Int!
}

type RawProposal implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  ownerId: UUID!
  status: ProposalStatusEnum!
  title: String!
  months: [ProposalMonth]!
  prizeAmount: BigFloat!

  """Reads a single `Account` that is related to this `RawProposal`."""
  owner: Account!
  budgetAmount: BigFloat
  fundingRequirement: BigFloat
}

enum ProposalStatusEnum {
  DRAFT
  FUNDING
  FUNDED
  CLOSED
}

type ProposalMonth {
  budgetAmount: BigFloat
  description: String
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A `RawProposal` edge in the connection."""
type RawProposalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RawProposal` at the end of the edge."""
  node: RawProposal!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `RawProposal`."""
enum RawProposalsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  STATUS_ASC
  STATUS_DESC
  TITLE_ASC
  TITLE_DESC
  MONTHS_ASC
  MONTHS_DESC
  PRIZE_AMOUNT_ASC
  PRIZE_AMOUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RawProposal` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RawProposalCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: UUID

  """Checks for equality with the object’s `status` field."""
  status: ProposalStatusEnum

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `months` field."""
  months: [ProposalMonthInput]

  """Checks for equality with the object’s `prizeAmount` field."""
  prizeAmount: BigFloat
}

"""An input for mutations affecting `ProposalMonth`"""
input ProposalMonthInput {
  budgetAmount: BigFloat
  description: String
}

"""A `Account` edge in the connection."""
type AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Account` at the end of the edge."""
  node: Account!
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A connection to a list of `ProposalDraft` values."""
type ProposalDraftsConnection {
  """A list of `ProposalDraft` objects."""
  nodes: [ProposalDraft!]!

  """
  A list of edges which contains the `ProposalDraft` and cursor to aid in pagination.
  """
  edges: [ProposalDraftsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProposalDraft` you could get from the connection."""
  totalCount: Int!
}

type ProposalDraft {
  id: UUID
  ownerId: UUID
  status: ProposalStatusEnum
  title: String
  months: [ProposalMonth]
  prizeAmount: BigFloat
}

"""A `ProposalDraft` edge in the connection."""
type ProposalDraftsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProposalDraft` at the end of the edge."""
  node: ProposalDraft!
}

"""Methods to use when ordering `ProposalDraft`."""
enum ProposalDraftsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  STATUS_ASC
  STATUS_DESC
  TITLE_ASC
  TITLE_DESC
  MONTHS_ASC
  MONTHS_DESC
  PRIZE_AMOUNT_ASC
  PRIZE_AMOUNT_DESC
}

"""
A condition to be used against `ProposalDraft` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProposalDraftCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: UUID

  """Checks for equality with the object’s `status` field."""
  status: ProposalStatusEnum

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `months` field."""
  months: [ProposalMonthInput]

  """Checks for equality with the object’s `prizeAmount` field."""
  prizeAmount: BigFloat
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Account`."""
  createAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAccountInput!
  ): CreateAccountPayload

  """Creates a single `ProposalDraft`."""
  createProposalDraft(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProposalDraftInput!
  ): CreateProposalDraftPayload

  """Creates a single `RawProposal`."""
  createRawProposal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRawProposalInput!
  ): CreateRawProposalPayload

  """Updates a single `Account` using its globally unique id and a patch."""
  updateAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountByNodeIdInput!
  ): UpdateAccountPayload

  """Updates a single `Account` using a unique key and a patch."""
  updateAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountInput!
  ): UpdateAccountPayload

  """
  Updates a single `RawProposal` using its globally unique id and a patch.
  """
  updateRawProposalByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRawProposalByNodeIdInput!
  ): UpdateRawProposalPayload

  """Updates a single `RawProposal` using a unique key and a patch."""
  updateRawProposal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRawProposalInput!
  ): UpdateRawProposalPayload

  """Deletes a single `Account` using its globally unique id."""
  deleteAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountByNodeIdInput!
  ): DeleteAccountPayload

  """Deletes a single `Account` using a unique key."""
  deleteAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountInput!
  ): DeleteAccountPayload

  """Deletes a single `RawProposal` using its globally unique id."""
  deleteRawProposalByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRawProposalByNodeIdInput!
  ): DeleteRawProposalPayload

  """Deletes a single `RawProposal` using a unique key."""
  deleteRawProposal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRawProposalInput!
  ): DeleteRawProposalPayload
}

"""The output of our create `Account` mutation."""
type CreateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was created by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the create `Account` mutation."""
input CreateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Account` to be created by this mutation."""
  account: AccountInput!
}

"""An input for mutations affecting `Account`"""
input AccountInput {
  id: UUID
  name: String!
}

"""The output of our create `ProposalDraft` mutation."""
type CreateProposalDraftPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProposalDraft` that was created by this mutation."""
  proposalDraft: ProposalDraft

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProposalDraft`. May be used by Relay 1."""
  proposalDraftEdge(
    """The method to use when ordering `ProposalDraft`."""
    orderBy: [ProposalDraftsOrderBy!] = [NATURAL]
  ): ProposalDraftsEdge
}

"""All input for the create `ProposalDraft` mutation."""
input CreateProposalDraftInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProposalDraft` to be created by this mutation."""
  proposalDraft: ProposalDraftInput!
}

"""An input for mutations affecting `ProposalDraft`"""
input ProposalDraftInput {
  id: UUID
  ownerId: UUID
  status: ProposalStatusEnum
  title: String
  months: [ProposalMonthInput]
  prizeAmount: BigFloat
}

"""The output of our create `RawProposal` mutation."""
type CreateRawProposalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RawProposal` that was created by this mutation."""
  rawProposal: RawProposal

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `RawProposal`."""
  owner: Account!

  """An edge for our `RawProposal`. May be used by Relay 1."""
  rawProposalEdge(
    """The method to use when ordering `RawProposal`."""
    orderBy: [RawProposalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RawProposalsEdge
}

"""All input for the create `RawProposal` mutation."""
input CreateRawProposalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RawProposal` to be created by this mutation."""
  rawProposal: RawProposalInput!
}

"""An input for mutations affecting `RawProposal`"""
input RawProposalInput {
  id: UUID
  ownerId: UUID!
  status: ProposalStatusEnum!
  title: String!
  months: [ProposalMonthInput]!
  prizeAmount: BigFloat!
}

"""The output of our update `Account` mutation."""
type UpdateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was updated by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the `updateAccountByNodeId` mutation."""
input UpdateAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!
}

"""
Represents an update to a `Account`. Fields that are set will be updated.
"""
input AccountPatch {
  id: UUID
  name: String
}

"""All input for the `updateAccount` mutation."""
input UpdateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!
  id: UUID!
}

"""The output of our update `RawProposal` mutation."""
type UpdateRawProposalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RawProposal` that was updated by this mutation."""
  rawProposal: RawProposal

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `RawProposal`."""
  owner: Account!

  """An edge for our `RawProposal`. May be used by Relay 1."""
  rawProposalEdge(
    """The method to use when ordering `RawProposal`."""
    orderBy: [RawProposalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RawProposalsEdge
}

"""All input for the `updateRawProposalByNodeId` mutation."""
input UpdateRawProposalByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RawProposal` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RawProposal` being updated.
  """
  patch: RawProposalPatch!
}

"""
Represents an update to a `RawProposal`. Fields that are set will be updated.
"""
input RawProposalPatch {
  id: UUID
  ownerId: UUID
  status: ProposalStatusEnum
  title: String
  months: [ProposalMonthInput]
  prizeAmount: BigFloat
}

"""All input for the `updateRawProposal` mutation."""
input UpdateRawProposalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RawProposal` being updated.
  """
  patch: RawProposalPatch!
  id: UUID!
}

"""The output of our delete `Account` mutation."""
type DeleteAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was deleted by this mutation."""
  account: Account
  deletedAccountNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the `deleteAccountByNodeId` mutation."""
input DeleteAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAccount` mutation."""
input DeleteAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `RawProposal` mutation."""
type DeleteRawProposalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RawProposal` that was deleted by this mutation."""
  rawProposal: RawProposal
  deletedRawProposalNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Account` that is related to this `RawProposal`."""
  owner: Account!

  """An edge for our `RawProposal`. May be used by Relay 1."""
  rawProposalEdge(
    """The method to use when ordering `RawProposal`."""
    orderBy: [RawProposalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RawProposalsEdge
}

"""All input for the `deleteRawProposalByNodeId` mutation."""
input DeleteRawProposalByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RawProposal` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRawProposal` mutation."""
input DeleteRawProposalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}
