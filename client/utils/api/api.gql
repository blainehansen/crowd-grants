query FetchPerson($personId: UUID!) {
	person: account(id: $personId) {
		id
		name
		publishedProjects {
			nodes {
				id
				title
				status
			}
		}
	}
}

query FetchYou($userId: UUID!) {
	account(id: $userId) {
		id
		name
		projects: projectsByOwnerId {
			nodes {
				id
				title
				status
			}
		}
		projectPledges {
			nodes {
				projectId
				title
				ownerId
				ownerName
				amount
				count
				vote
			}
		}
	}
}


query FetchDrafts($userId: UUID!) {
	projects(condition: {ownerId: $userId, status: DRAFT}) {
		nodes {
			id
			title
		}
	}
}

query FetchDraft($draftId: UUID!) {
	project(id: $draftId) {
		id
		title
		body
		initialAmount
		monthCount
		monthlyAmount
		prizeAmount
	}
}

mutation CreateDraft($input: CreateNewDraftInput!) {
	createNewDraft(input: $input) {
		uuid
	}
}

mutation SaveDraft(
	$projectId: UUID!, $title: String!, $body: String!,
	$initialAmount: BigFloat!, $monthCount: Int!, $monthlyAmount: BigFloat!, $prizeAmount: BigFloat!,
) {
	updateProject(
		input: {id: $projectId, patch: {
			title: $title,
			body: $body,
			initialAmount: $initialAmount,
			monthCount: $monthCount,
			monthlyAmount: $monthlyAmount,
			prizeAmount: $prizeAmount,
		}}
	) { _: clientMutationId }
}

mutation PublishDraft($projectId: UUID!) {
	publishDraft(input: {projectId: $projectId}) { _: clientMutationId }
}

# mutation UnpublishDraft($projectId: UUID!) {
# 	unpublishProject(input: {projectId: $projectId})
# }


query FetchProposals {
	projects(condition: {status: PROPOSAL}) {
		nodes {
			id
			owner {
				id
				name
			}
			title
			totalPledgedAmount
			fundingRequirement
		}
	}
}


query FetchProposal($proposalId: UUID!) {
	project(id: $proposalId) {
		id
		owner {
			id
			name
		}
		title
		body
		initialAmount
		monthCount
		monthlyAmount
		prizeAmount
		# baseFundingRequirement
		fundingRequirement
		totalPledgedAmount
		totalPledgerCount
	}
}


mutation MakePledge($pledgerId: UUID!, $projectId: UUID!, $amount: BigFloat!) {
	makePledge(
		input: {pledgerId: $pledgerId, projectId: $projectId, amount: $amount}
	) { _: clientMutationId }
}

query FetchProject($projectId: UUID!, $userId: UUID!) {
	project(id: $projectId) {
		id
		owner {
			id
			name
		}
		title
		body
		status
		initialAmount
		monthCount
		monthlyAmount
		prizeAmount

		# baseFundingRequirement
		fundingRequirement
		actualPrizeAmount
		totalPledgedAmount
		totalPledgerCount

		fundsPaid
		monthsPassed
		nextPayment {
			amount
			isLast
			kind
		}
		overallPledgeVote {
			shouldContinue
			weightInFavor
			weightOpposed
		}

		userPledge(userId: $userId) {
			vote
			amount
			count
		}
	}
}

mutation CastVote($pledgerId: UUID!, $projectId: UUID!, $shouldContinue: Boolean!) {
	castVote(
		input: {argPledgerId: $pledgerId, argProjectId: $projectId, argShouldContinue: $shouldContinue}
	) { _: clientMutationId }
}


query FetchProjects {
	projects {
		nodes {
			id
			owner {
				id
				name
			}
			title
			totalPledgedAmount
			monthsPassed
			monthCount
			fundsPaid
		}
	}
}
